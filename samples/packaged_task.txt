#include "DecoratorPattern/FunctionalDecorator.hpp"
#include <MyVector.hpp>
#include <algorithm>
#include <array>
#include <future>
#include <iostream>
#include <map>
#include <memory>
#include <sstream>
#include <string>
#include <thread>
using namespace std;

using namespace following::patterns;

class A
{
public:
    string func(string in_str)
    {
        ostringstream ss;
        if (in_str.empty())
        {
            throw runtime_error("input string cannot be empty");
        }
        ss << "Calling function func for A with value " << in_str << endl;
        return ss.str();
    }
};
int main()
{
    A a;
    // promise<string> prom;
    // future<string> fut = prom.get_future();
    // thread t1([&a, &prom]() {
    //     try
    //     {
    //         auto result = a.func("");
    //         prom.set_value(result);
    //     }
    //     catch(const std::exception& e)
    //     {
    //         prom.set_exception(current_exception());
    //     }
    // });
    packaged_task<string(string)> task(std::bind(&A::func,&a, std::placeholders::_1));
    future<string> fut = task.get_future();
    thread t1(std::move(task),"helo");
    try
    {
        cout << fut.get();
    }
    catch(const std::exception& e)
    {
        std::cerr << e.what() << '\n';
    }

    t1.join();
    return 0;
}
